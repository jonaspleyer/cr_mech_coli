use pyo3::prelude::*;
use rayon::prelude::*;

use crate::{run_simulation, CellContainer, Configuration};

/*
/// Defines how to sample the given value
#[pyclass]
#[derive(Clone, Debug, Serialize, Deserialize)]
pub enum SampleF32 {
    /// Fixed value
    Fixed {
        value: f32
    },
    /// Sample linearly, ie. (1.0, 2.0, 5) => [1.0, 1.25, 1.5, 1.75, 2.0]
    Linear {
        lower: f32,
        upper: f32,
        n_samples: usize
    },
    /// Sample randomly: This property can be sampled differently by choosing a distribution.
    /// Possible common choices are uniform,
    Random {
        lower: f32,
        upper: f32,
        n_samples: usize,
    },
}

#[pyclass]
#[derive(Clone, Debug)]
pub enum Distributions {
    Uniform,
}
*/

/// Execute multiple configurations which could have been generated by sampling
#[pyfunction]
pub fn run_multiple_configs(configs: Vec<Configuration>) -> PyResult<Vec<CellContainer>> {
    let res = configs
        .into_par_iter()
        .map(|config| run_simulation(config))
        .collect::<Result<Vec<_>, _>>()?;
    Ok(res)
}
