.. cr_mech_coli documentation master file, created by
   sphinx-quickstart on Tue Jul 30 00:53:55 2024.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

cr_mech_coli
############

.. image:: https://img.shields.io/github/license/jonaspleyer/cr_mech_coli\?style=flat-square
   :alt: GPLv2 License
.. image:: https://img.shields.io/github/actions/workflow/status/jonaspleyer/cr_mech_coli/CI.yml?style=flat-square&label=CI
   :alt: Test Status
.. image:: https://img.shields.io/github/actions/workflow/status/jonaspleyer/cr_mech_coli/sphinx_doc.yml?style=flat-square&label=Docs
   :alt: Build Status

This package is centered around a mechanical model for rod-shaped bacteria such as `E.Coli`.

:ref:`Model <model>`
--------------------

The model is mechanistic and coarse-grained enough such that we can estimate its parameters from
even a small dataset.
Its low computational cost mean that it can be readily applied in the construction of other
Agent-Based Simulations within :code:`cellular_raza` :cite:`Pleyer_cellular_raza_2023`.

:ref:`Fitting Methods <fitting-methods>`
----------------------------------------

To quantify if calculated results from our model match with given experimental data, we need to
extract agent information from masks and compare them with calculated results.
To capture the spatial effects and make our methods applicable in a wider context, we focus on the
masks instead of other possible approaches.
We use methods from :code:`sciki-image` :cite:`vanderWalt2014`.

:ref:`Image Generation <image-generation>`
------------------------------------------

The data generated by such simulations can be used to create labelled images which can then be used
to train deep-learning cell-segmentation and cell-tracking algorithms.
The quality of training data is dependent on our ability to reverse-engineer realistic microscopy
images from the generated simulation data.

We use :code:`pyvista` :cite:`Sullivan2019` to create a 3D image which contains
complex lighting and occlusion effects which would be harder to reproduce in a 2D plot.
Afterwards, we can introduce effects with :code:`opencv`:cite:`opencv_library` to mimick effects
such as optical aberration, sensor noise or other imperfections which can be introduced by the
measurement device.
This step is under active development and the example images below are an initial attempt only.

.. subfigure:: ABC
    :layout-sm: A|B|C
    :gap: 8px
    :subcaptions: below
    :class-grid: outline

    .. image:: _static/11571737453049821261/raw_pv/000000200.png
    .. image:: _static/11571737453049821261/images/000000200.png
    .. image:: _static/11571737453049821261/masks/000000200.png

    Snapshots at `t=20min`.

.. subfigure:: ABC
    :layout-sm: A|B|C
    :gap: 8px
    :subcaptions: below
    :class-grid: outline

    .. image:: _static/11571737453049821261/raw_pv/000000600.png
    .. image:: _static/11571737453049821261/images/000000600.png
    .. image:: _static/11571737453049821261/masks/000000600.png

    Snapshots at `t=60min`.

.. subfigure:: ABC
    :layout-sm: A|B|C
    :gap: 8px
    :subcaptions: below
    :class-grid: outline

    .. image:: _static/11571737453049821261/raw_pv/000001000.png
    .. image:: _static/11571737453049821261/images/000001000.png
    .. image:: _static/11571737453049821261/masks/000001000.png

    Snapshots at `t=100min`.

.. toctree::
   :maxdepth: 4
   :caption: Contents:
   :titlesonly:
   :hidden:

    Documentation <documentation/index>
    Scripts <scripts/index>
    Model <model>
    Fitting Methods <fitting-methods>
    Image Generation <image-generation>
    Performance <performance>
    References <references>
    Changelog <changelog>

Indices and tables
##################

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

